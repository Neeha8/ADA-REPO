name: ADA Workflow
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  accessibility:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19.x'
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test Accessibility
        id: run-ada-tests
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip xvfb libxi6 libgconf-2-4
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install ./google-chrome-stable_current_amd64.deb
          wget https://chromedriver.storage.googleapis.com/86.0.4240.22/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          npm install --save-dev karma-phantomjs-launcher
          npm install --save intl
          npm install -g pa11y-ci
          npm install -g concurrently
          export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
          echo $DISPLAY
          npm run test
          concurrently "npm start & npx wait-on http://localhost:4200" "sleep 20 && sh pa11y.sh"
        
      - name: Upload test report
        if: failure() && steps.run-ada-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: ada-test-report
          path: ada-test.json
  deploy:
    needs: accessibility
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
  report:
    needs: [deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJSON(github) }}"
